// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  file: (where?: FileWhereInput) => Promise<boolean>;
  friend: (where?: FriendWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  friend: (where: FriendWhereUniqueInput) => FriendNullablePromise;
  friends: (args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Friend>;
  friendsConnection: (args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FriendConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFile: (data: FileCreateInput) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createFriend: (data: FriendCreateInput) => FriendPromise;
  updateFriend: (args: {
    data: FriendUpdateInput;
    where: FriendWhereUniqueInput;
  }) => FriendPromise;
  updateManyFriends: (args: {
    data: FriendUpdateManyMutationInput;
    where?: FriendWhereInput;
  }) => BatchPayloadPromise;
  upsertFriend: (args: {
    where: FriendWhereUniqueInput;
    create: FriendCreateInput;
    update: FriendUpdateInput;
  }) => FriendPromise;
  deleteFriend: (where: FriendWhereUniqueInput) => FriendPromise;
  deleteManyFriends: (where?: FriendWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  friend: (
    where?: FriendSubscriptionWhereInput
  ) => FriendSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FriendOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "friendId_ASC"
  | "friendId_DESC"
  | "chatRoomId_ASC"
  | "chatRoomId_DESC"
  | "permission_ASC"
  | "permission_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FileOrderByInput =
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "biography_ASC"
  | "biography_DESC"
  | "profileFile_ASC"
  | "profileFile_DESC";

export interface FriendUpdateManyWithoutAuthorInput {
  create?: Maybe<
    FriendCreateWithoutAuthorInput[] | FriendCreateWithoutAuthorInput
  >;
  delete?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  connect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  set?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  disconnect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
  update?: Maybe<
    | FriendUpdateWithWhereUniqueWithoutAuthorInput[]
    | FriendUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | FriendUpsertWithWhereUniqueWithoutAuthorInput[]
    | FriendUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  updateMany?: Maybe<
    | FriendUpdateManyWithWhereNestedInput[]
    | FriendUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateOneRequiredWithoutFriendsInput {
  create?: Maybe<UserCreateWithoutFriendsInput>;
  update?: Maybe<UserUpdateWithoutFriendsDataInput>;
  upsert?: Maybe<UserUpsertWithoutFriendsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface FileWhereInput {
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateManyMutationInput {
  nickname?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  phoneNumber?: Maybe<String>;
  biography?: Maybe<String>;
  profileFile?: Maybe<String>;
}

export interface FriendCreateManyWithoutAuthorInput {
  create?: Maybe<
    FriendCreateWithoutAuthorInput[] | FriendCreateWithoutAuthorInput
  >;
  connect?: Maybe<FriendWhereUniqueInput[] | FriendWhereUniqueInput>;
}

export interface FriendUpdateManyWithWhereNestedInput {
  where: FriendScalarWhereInput;
  data: FriendUpdateManyDataInput;
}

export interface UserCreateInput {
  nickname?: Maybe<String>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  birthday?: Maybe<DateTimeInput>;
  phoneNumber?: Maybe<String>;
  friends?: Maybe<FriendCreateManyWithoutAuthorInput>;
  biography?: Maybe<String>;
  profileFile?: Maybe<String>;
}

export interface FriendScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  friendId?: Maybe<String>;
  friendId_not?: Maybe<String>;
  friendId_in?: Maybe<String[] | String>;
  friendId_not_in?: Maybe<String[] | String>;
  friendId_lt?: Maybe<String>;
  friendId_lte?: Maybe<String>;
  friendId_gt?: Maybe<String>;
  friendId_gte?: Maybe<String>;
  friendId_contains?: Maybe<String>;
  friendId_not_contains?: Maybe<String>;
  friendId_starts_with?: Maybe<String>;
  friendId_not_starts_with?: Maybe<String>;
  friendId_ends_with?: Maybe<String>;
  friendId_not_ends_with?: Maybe<String>;
  chatRoomId?: Maybe<String>;
  chatRoomId_not?: Maybe<String>;
  chatRoomId_in?: Maybe<String[] | String>;
  chatRoomId_not_in?: Maybe<String[] | String>;
  chatRoomId_lt?: Maybe<String>;
  chatRoomId_lte?: Maybe<String>;
  chatRoomId_gt?: Maybe<String>;
  chatRoomId_gte?: Maybe<String>;
  chatRoomId_contains?: Maybe<String>;
  chatRoomId_not_contains?: Maybe<String>;
  chatRoomId_starts_with?: Maybe<String>;
  chatRoomId_not_starts_with?: Maybe<String>;
  chatRoomId_ends_with?: Maybe<String>;
  chatRoomId_not_ends_with?: Maybe<String>;
  permission?: Maybe<Boolean>;
  permission_not?: Maybe<Boolean>;
  AND?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  OR?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
  NOT?: Maybe<FriendScalarWhereInput[] | FriendScalarWhereInput>;
}

export interface FriendUpdateManyMutationInput {
  nickname?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  friendId?: Maybe<String>;
  chatRoomId?: Maybe<String>;
  permission?: Maybe<Boolean>;
}

export interface FriendUpdateWithoutAuthorDataInput {
  nickname?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  friendId?: Maybe<String>;
  chatRoomId?: Maybe<String>;
  permission?: Maybe<Boolean>;
}

export interface FriendWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  friendId?: Maybe<String>;
  friendId_not?: Maybe<String>;
  friendId_in?: Maybe<String[] | String>;
  friendId_not_in?: Maybe<String[] | String>;
  friendId_lt?: Maybe<String>;
  friendId_lte?: Maybe<String>;
  friendId_gt?: Maybe<String>;
  friendId_gte?: Maybe<String>;
  friendId_contains?: Maybe<String>;
  friendId_not_contains?: Maybe<String>;
  friendId_starts_with?: Maybe<String>;
  friendId_not_starts_with?: Maybe<String>;
  friendId_ends_with?: Maybe<String>;
  friendId_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  chatRoomId?: Maybe<String>;
  chatRoomId_not?: Maybe<String>;
  chatRoomId_in?: Maybe<String[] | String>;
  chatRoomId_not_in?: Maybe<String[] | String>;
  chatRoomId_lt?: Maybe<String>;
  chatRoomId_lte?: Maybe<String>;
  chatRoomId_gt?: Maybe<String>;
  chatRoomId_gte?: Maybe<String>;
  chatRoomId_contains?: Maybe<String>;
  chatRoomId_not_contains?: Maybe<String>;
  chatRoomId_starts_with?: Maybe<String>;
  chatRoomId_not_starts_with?: Maybe<String>;
  chatRoomId_ends_with?: Maybe<String>;
  chatRoomId_not_ends_with?: Maybe<String>;
  permission?: Maybe<Boolean>;
  permission_not?: Maybe<Boolean>;
  AND?: Maybe<FriendWhereInput[] | FriendWhereInput>;
  OR?: Maybe<FriendWhereInput[] | FriendWhereInput>;
  NOT?: Maybe<FriendWhereInput[] | FriendWhereInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface FileCreateInput {
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface UserUpdateInput {
  nickname?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  phoneNumber?: Maybe<String>;
  friends?: Maybe<FriendUpdateManyWithoutAuthorInput>;
  biography?: Maybe<String>;
  profileFile?: Maybe<String>;
}

export interface FileUpdateManyMutationInput {
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
}

export interface FriendUpdateManyDataInput {
  nickname?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  friendId?: Maybe<String>;
  chatRoomId?: Maybe<String>;
  permission?: Maybe<Boolean>;
}

export interface UserUpsertWithoutFriendsInput {
  update: UserUpdateWithoutFriendsDataInput;
  create: UserCreateWithoutFriendsInput;
}

export interface FriendUpsertWithWhereUniqueWithoutAuthorInput {
  where: FriendWhereUniqueInput;
  update: FriendUpdateWithoutAuthorDataInput;
  create: FriendCreateWithoutAuthorInput;
}

export interface UserUpdateWithoutFriendsDataInput {
  nickname?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  phoneNumber?: Maybe<String>;
  biography?: Maybe<String>;
  profileFile?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  birthday_not?: Maybe<DateTimeInput>;
  birthday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_lt?: Maybe<DateTimeInput>;
  birthday_lte?: Maybe<DateTimeInput>;
  birthday_gt?: Maybe<DateTimeInput>;
  birthday_gte?: Maybe<DateTimeInput>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  friends_every?: Maybe<FriendWhereInput>;
  friends_some?: Maybe<FriendWhereInput>;
  friends_none?: Maybe<FriendWhereInput>;
  biography?: Maybe<String>;
  biography_not?: Maybe<String>;
  biography_in?: Maybe<String[] | String>;
  biography_not_in?: Maybe<String[] | String>;
  biography_lt?: Maybe<String>;
  biography_lte?: Maybe<String>;
  biography_gt?: Maybe<String>;
  biography_gte?: Maybe<String>;
  biography_contains?: Maybe<String>;
  biography_not_contains?: Maybe<String>;
  biography_starts_with?: Maybe<String>;
  biography_not_starts_with?: Maybe<String>;
  biography_ends_with?: Maybe<String>;
  biography_not_ends_with?: Maybe<String>;
  profileFile?: Maybe<String>;
  profileFile_not?: Maybe<String>;
  profileFile_in?: Maybe<String[] | String>;
  profileFile_not_in?: Maybe<String[] | String>;
  profileFile_lt?: Maybe<String>;
  profileFile_lte?: Maybe<String>;
  profileFile_gt?: Maybe<String>;
  profileFile_gte?: Maybe<String>;
  profileFile_contains?: Maybe<String>;
  profileFile_not_contains?: Maybe<String>;
  profileFile_starts_with?: Maybe<String>;
  profileFile_not_starts_with?: Maybe<String>;
  profileFile_ends_with?: Maybe<String>;
  profileFile_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface FriendUpdateInput {
  nickname?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  friendId?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutFriendsInput>;
  chatRoomId?: Maybe<String>;
  permission?: Maybe<Boolean>;
}

export interface UserCreateWithoutFriendsInput {
  nickname?: Maybe<String>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  birthday?: Maybe<DateTimeInput>;
  phoneNumber?: Maybe<String>;
  biography?: Maybe<String>;
  profileFile?: Maybe<String>;
}

export interface UserCreateOneWithoutFriendsInput {
  create?: Maybe<UserCreateWithoutFriendsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FriendCreateInput {
  nickname?: Maybe<String>;
  firstName: String;
  lastName: String;
  friendId: String;
  author: UserCreateOneWithoutFriendsInput;
  chatRoomId: String;
  permission?: Maybe<Boolean>;
}

export interface FriendSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FriendWhereInput>;
  AND?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
  OR?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
  NOT?: Maybe<FriendSubscriptionWhereInput[] | FriendSubscriptionWhereInput>;
}

export interface FriendUpdateWithWhereUniqueWithoutAuthorInput {
  where: FriendWhereUniqueInput;
  data: FriendUpdateWithoutAuthorDataInput;
}

export type FriendWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FriendCreateWithoutAuthorInput {
  nickname?: Maybe<String>;
  firstName: String;
  lastName: String;
  friendId: String;
  chatRoomId: String;
  permission?: Maybe<Boolean>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  nickname?: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  birthday?: DateTimeOutput;
  phoneNumber?: String;
  biography?: String;
  profileFile?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  biography: () => Promise<String>;
  profileFile: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  biography: () => Promise<AsyncIterator<String>>;
  profileFile: () => Promise<AsyncIterator<String>>;
}

export interface Friend {
  id: ID_Output;
  nickname?: String;
  firstName: String;
  lastName: String;
  friendId: String;
  chatRoomId: String;
  permission: Boolean;
}

export interface FriendPromise extends Promise<Friend>, Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  friendId: () => Promise<String>;
  author: <T = UserPromise>() => T;
  chatRoomId: () => Promise<String>;
  permission: () => Promise<Boolean>;
}

export interface FriendSubscription
  extends Promise<AsyncIterator<Friend>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  friendId: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  chatRoomId: () => Promise<AsyncIterator<String>>;
  permission: () => Promise<AsyncIterator<Boolean>>;
}

export interface FriendNullablePromise
  extends Promise<Friend | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  friendId: () => Promise<String>;
  author: <T = UserPromise>() => T;
  chatRoomId: () => Promise<String>;
  permission: () => Promise<Boolean>;
}

export interface File {
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FriendPreviousValues {
  id: ID_Output;
  nickname?: String;
  firstName: String;
  lastName: String;
  friendId: String;
  chatRoomId: String;
  permission: Boolean;
}

export interface FriendPreviousValuesPromise
  extends Promise<FriendPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  friendId: () => Promise<String>;
  chatRoomId: () => Promise<String>;
  permission: () => Promise<Boolean>;
}

export interface FriendPreviousValuesSubscription
  extends Promise<AsyncIterator<FriendPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  friendId: () => Promise<AsyncIterator<String>>;
  chatRoomId: () => Promise<AsyncIterator<String>>;
  permission: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFriend {
  count: Int;
}

export interface AggregateFriendPromise
  extends Promise<AggregateFriend>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFriendSubscription
  extends Promise<AsyncIterator<AggregateFriend>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FriendSubscriptionPayload {
  mutation: MutationType;
  node: Friend;
  updatedFields: String[];
  previousValues: FriendPreviousValues;
}

export interface FriendSubscriptionPayloadPromise
  extends Promise<FriendSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FriendPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FriendPreviousValuesPromise>() => T;
}

export interface FriendSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FriendSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FriendSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FriendPreviousValuesSubscription>() => T;
}

export interface FriendConnection {
  pageInfo: PageInfo;
  edges: FriendEdge[];
}

export interface FriendConnectionPromise
  extends Promise<FriendConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FriendEdge>>() => T;
  aggregate: <T = AggregateFriendPromise>() => T;
}

export interface FriendConnectionSubscription
  extends Promise<AsyncIterator<FriendConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FriendEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFriendSubscription>() => T;
}

export interface User {
  id: ID_Output;
  nickname?: String;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  birthday?: DateTimeOutput;
  phoneNumber?: String;
  biography?: String;
  profileFile?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  friends: <T = FragmentableArray<Friend>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  biography: () => Promise<String>;
  profileFile: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  friends: <T = Promise<AsyncIterator<FriendSubscription>>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  biography: () => Promise<AsyncIterator<String>>;
  profileFile: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  phoneNumber: () => Promise<String>;
  friends: <T = FragmentableArray<Friend>>(args?: {
    where?: FriendWhereInput;
    orderBy?: FriendOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  biography: () => Promise<String>;
  profileFile: () => Promise<String>;
}

export interface FilePreviousValues {
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface FriendEdge {
  node: Friend;
  cursor: String;
}

export interface FriendEdgePromise extends Promise<FriendEdge>, Fragmentable {
  node: <T = FriendPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FriendEdgeSubscription
  extends Promise<AsyncIterator<FriendEdge>>,
    Fragmentable {
  node: <T = FriendSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Friend",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Faculty",
    embedded: false
  },
  {
    name: "Major",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
