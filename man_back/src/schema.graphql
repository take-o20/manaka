type Query {
  user(input: UserInput!): User!
  users: [User]!
  friend(input: FriendInput!):Friend!
  friends:[Friend]! 
  friendslist(input: FriendsListInput!):[Friend]!
}
input UserInput {
  id: ID!
}
input FriendInput {
  id: ID!
}
input FriendsListInput{
  authorId: String!
}
input profileFileInput{
  authorId: String!
}
type Mutation {
  signup(input: SignUpInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  addfriend(input: AddFriendInput!): FriendUpdatePayload!
  friendupdate(input:FriendUpdateInput!):FriendUpdatePayload!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
}

input LoginInput {
  email: String!
  password: String!
}

input AddFriendInput {
  friendId: ID!
  firstName: String!
  lastName: String!
  authorId: ID!
}

input FriendUpdateInput {
  id: ID!
  permission: Boolean!
}


type AuthPayload {
  token: String
  user: User
}
type User {
  id: ID!
  nickname: String
  firstName: String!
  lastName: String!
  email: String!
  birthday: String
  phoneNumber: String
  friends:[Friend!]!
  biography: String
}

type Friend{
  id: ID!
  nickname: String
  firstName: String!
  lastName: String!
  friendId: String!
  author: User!
  chatRoomId: String!
  permission: Boolean!
}
type FriendUpdatePayload {
  friend: Friend!
}
